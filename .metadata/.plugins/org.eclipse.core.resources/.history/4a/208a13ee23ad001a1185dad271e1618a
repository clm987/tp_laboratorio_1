#include <stdio.h>
#include <stdlib.h>
#include "LinkedList.h"
#include "Employee.h"
#include "IOdata.h"

/** \brief Parsea los datos los datos de los empleados desde el archivo data.csv (modo texto).
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int parser_EmployeeFromText(FILE* pFile , LinkedList* pArrayListEmployee)
{
	char bufferId[128];
	char bufferNombre[128];
	char bufferHorasTrabajadas[128];
	char bufferSalario[128];
	int cont = 0;
	int cant = 0;
	int retCode = -1;
	Employee* pAuxEmployee = NULL;

	fscanf(pFile, "%[^,],%[^,],%[^,],%[^\n]\n", bufferId, bufferNombre, bufferHorasTrabajadas, bufferSalario);
	printf("%s   %s    %s    %s\n\n", bufferId, bufferNombre, bufferHorasTrabajadas, bufferSalario);

	while( !feof(pFile) )
	{
	cant = fscanf(pFile, "%[^,],%[^,],%[^,],%[^\n]\n", bufferId, bufferNombre, bufferHorasTrabajadas, bufferSalario);
		if( cant < 4)
		{break;}

		pAuxEmployee = employee_newParametros(bufferId, bufferNombre, bufferHorasTrabajadas, bufferSalario);

		if(pAuxEmployee != NULL)
		{
			ll_add(pArrayListEmployee, pAuxEmployee);
			cont++;
			printEmployees(pAuxEmployee);
			retCode = 0;
		}

	}

	printf("\n %d leidos con exito", cont);
	system("pause");
	free(pArrayListEmployee);
	free(pAuxEmployee);
    return retCode;
}

/** \brief Parsea los datos los datos de los empleados desde el archivo data.csv (modo binario).
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int parser_EmployeeFromBinary(FILE* pFile , LinkedList* pArrayListEmployee)
{
	int retCode = -1;
	int readCont = 0;
	int divi = 0;
	int cont1 = 0;
	int auxId;
	int auxSueldo;
	int auxHoras;
	char bufferNombre[128];

	Employee* pAuxEmployee = NULL;

		if(pFile != NULL && pArrayListEmployee != NULL)
		{

			do{
			cont1++;

			pAuxEmployee = employee_new();
					if(pAuxEmployee != NULL)
					{
						readCont = fread(pAuxEmployee,sizeof(Employee),1,pFile);
							if( readCont < 1)
							{
										if(feof(pFile))
										{
											break;
										}
										else
										{
											showMessage ("Ocurrio un error al leer el archivo. Se cerrara la aplicacion");
										}
							}
							if(!getEmployee(&auxId, bufferNombre, &auxHoras, &auxSueldo, pAuxEmployee))
							{
								ll_add(pArrayListEmployee, pAuxEmployee);
							}
					}
			}while(!feof(pFile));
		retCode = 0;
		fclose(pFile);
		free(pArrayListEmployee);
		free(pAuxEmployee);
		}

	divi = sizeof(Employee)*cont1;
	printf("Se cargaron %d empleados", divi);
   return retCode;
}
