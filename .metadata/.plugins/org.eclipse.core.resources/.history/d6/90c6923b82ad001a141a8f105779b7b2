#include <stdio.h>
#include <stdlib.h>
#include "LinkedList.h"
#include "Employee.h"
#include "IOdata.h"
#include "parser.h"

/** \brief Carga los datos de los empleados desde el archivo data.csv (modo texto).
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_loadFromText(char* path , LinkedList* pArrayListEmployee)
{
	FILE* file;
	int retCode = -1;

	file = fopen(path,"r");

	if(file == NULL)
	{
	 showMessage ("Ocurrio un error al abrir el archivo. Se cerrara la aplicacion");
	 exit(EXIT_FAILURE);
	}

	if(!parser_EmployeeFromText(file , pArrayListEmployee))
	{
		retCode = 0;
	}

	  fclose(file);

    return retCode;
}

/** \brief Carga los datos de los empleados desde el archivo data.csv (modo binario).
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_loadFromBinary(char* path , LinkedList* pArrayListEmployee)
{
	FILE* file;
		int retCode = -1;

		if(path != NULL && pArrayListEmployee != NULL)
		{
			file = fopen(path,"rb");

			if(file == NULL)
			{
			 showMessage ("Ocurrio un error al abrir el archivo. Se cerrara la aplicacion");
			 //exit(EXIT_FAILURE);
			}

			if(!parser_EmployeeFromBinary(file, pArrayListEmployee))
			{
				retCode = 0;
			}
		}
	fclose(file);

	return retCode;
}

/** \brief Alta de empleados
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_addEmployee(LinkedList* pArrayListEmployee)
{
	int retCode = -1;
	Employee* this = NULL;

	if(!EmployeeAdd(this))
	{
		if(!ll_add(pArrayListEmployee, this))
		{
		printEmployees(this);
		retCode = 0;
		}
	}
    return retCode;
}

/** \brief Modificar datos de empleado
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_editEmployee(LinkedList* pArrayListEmployee)
{
	int retCode = 0;
	//int option;
	int Id;
	Employee* this = NULL;

	getNaturalNumber(&Id,"\nIngrese el ID del Empleado a modificar: ", "Error debe ingresar solo numeros",3);
	searchId(Id, pArrayListEmployee);
	this =(Employee*)ll_get(pArrayListEmployee,Id);
	printEmployees(this);





    return retCode;
}

/** \brief Baja de empleado
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_removeEmployee(LinkedList* pArrayListEmployee)
{
    return 1;
}

/** \brief Listar empleados
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_ListEmployee(LinkedList* pArrayListEmployee)
{
    return 1;
}

/** \brief Ordenar empleados
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_sortEmployee(LinkedList* pArrayListEmployee)
{
    return 1;
}

/** \brief Guarda los datos de los empleados en el archivo data.csv (modo texto).
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_saveAsText(char* path , LinkedList* pArrayListEmployee)
{
    return 1;
}

/** \brief Guarda los datos de los empleados en el archivo data.csv (modo binario).
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_saveAsBinary(char* path , LinkedList* pArrayListEmployee)
{
    return 1;
}

